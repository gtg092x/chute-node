// Generated by CoffeeScript 1.3.1
var Chute, Chutes, request;

request = require('request');

Chute = (function() {

  Chute.name = 'Chute';

  function Chute(options) {
    if (options == null) {
      options = {};
    }
    this.options = {
      endpoint: 'http://api.getchute.com/v1'
    };
    this.set(options);
  }

  Chute.prototype.set = function(options) {
    var key;
    if (options == null) {
      options = {};
    }
    for (key in options) {
      this.options[key] = options[key];
    }
    return this.initializeResources();
  };

  Chute.prototype.initializeResources = function() {
    return this.chutes = new Chutes(this);
    /*
    		@parcels = new Parcels @
    		@assets = new Assets @
    		@bundles = new Bundles @
    */

  };

  return Chute;

})();

Chutes = (function() {

  Chutes.name = 'Chutes';

  function Chutes(client) {
    this.client = client;
  }

  Chutes.prototype.all = function(callback) {
    return request({
      url: "" + this.client.options.endpoint + "/me/chutes",
      method: 'GET',
      qs: {
        oauth_token: this.client.options.token
      }
    }, function(err, res, body) {
      if (res.statusCode === 401) {
        body = {
          error: body
        };
      } else {
        body = JSON.parse(body);
      }
      if (!err && res.statusCode === 200) {
        return callback(false, body.data);
      } else {
        return callback(body.error, []);
      }
    });
  };

  Chutes.prototype.find = function(options, callback) {
    var id;
    id = options.id || options.shortcut;
    return request({
      url: "" + this.client.options.endpoint + "/chutes/" + id,
      method: 'GET',
      qs: {
        oauth_token: this.client.options.token
      }
    }, function(err, res, body) {
      if (res.statusCode === 401) {
        body = {
          error: body
        };
      } else {
        body = JSON.parse(body);
      }
      if (!err && res.statusCode === 200) {
        return callback(false, body.data);
      } else {
        return callback(body.error, []);
      }
    });
  };

  Chutes.prototype.create = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/chutes",
      method: 'POST',
      qs: {
        oauth_token: this.client.options.token
      },
      form: {
        'chute[name]': options.name
      }
    }, function(err, res, body) {
      if (res.statusCode === 401) {
        body = {
          error: body
        };
      } else {
        body = JSON.parse(body);
      }
      if (!err && res.statusCode === 201) {
        return callback(false, body.data);
      } else {
        return callback(body.error, {});
      }
    });
  };

  Chutes.prototype.update = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/chutes/" + (options.id || options.shortcut),
      method: 'PUT',
      qs: {
        oauth_token: this.client.options.token
      },
      form: {
        'chute[name]': options.name
      }
    }, function(err, res, body) {
      if (res.statusCode === 401) {
        body = {
          error: body
        };
      } else {
        body = JSON.parse(body);
      }
      if (!err && res.statusCode === 200) {
        return callback(false, body.data);
      } else {
        return callback(body.error);
      }
    });
  };

  Chutes.prototype.remove = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/chutes/" + (options.id || options.shortcut),
      method: 'DELETE',
      qs: {
        oauth_token: this.client.options.token
      }
    }, function(err, res, body) {
      if (!err && res.statusCode === 200) {
        return callback(false);
      } else {
        return callback(res.statusCode === 401 ? body : JSON.parse(body).error);
      }
    });
  };

  return Chutes;

})();

module.exports = Chute;
