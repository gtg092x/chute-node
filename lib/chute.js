// Generated by CoffeeScript 1.3.3
var Assets, Bundles, Chute, Chutes, Uploads, async, fs, request;

request = require('request');

fs = require('fs');

async = require('async');

String.prototype.width = function(width) {
  return "" + this + "/w/" + width;
};

String.prototype.height = function(height) {
  return "" + this + "/h/" + height;
};

String.prototype.fit = function(width, height) {
  return "" + this + "/fit/" + width + "x" + height;
};

String.prototype.fill = function(width, height) {
  return "" + this + "/" + width + "x" + height;
};

Chute = (function() {

  function Chute(options) {
    if (options == null) {
      options = {};
    }
    this.options = {};
    this.set(options);
  }

  Chute.prototype.set = function(options) {
    var key;
    if (options == null) {
      options = {};
    }
    for (key in options) {
      this.options[key] = options[key];
    }
    return this.initializeResources();
  };

  Chute.prototype.initializeResources = function() {
    this.chutes = new Chutes(this);
    this.uploads = new Uploads(this);
    this.assets = new Assets(this);
    return this.bundles = new Bundles(this);
  };

  Chute.prototype.search = function(options, callback) {
    if (!options.type) {
      options.type = 'all';
    }
    return request({
      url: "http://api.getchute.com/v1/meta/" + options.type + "/" + options.key,
      method: 'GET',
      headers: {
        'x-client_id': this.options.id,
        'Authorization': "OAuth " + this.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 201:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  return Chute;

})();

Bundles = (function() {

  function Bundles(client) {
    this.client = client;
  }

  Bundles.prototype.create = function(options, callback) {
    return request({
      url: "http://api.getchute.com/v1/bundles",
      method: 'POST',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      },
      form: {
        asset_ids: JSON.stringify(options.ids)
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 201:
          return callback(false, JSON.parse(body));
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Bundles.prototype.find = function(options, callback) {
    return request({
      url: "http://api.getchute.com/v1/bundles/" + (options.id || options.shortcut),
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Bundles.prototype.remove = function(options, callback) {
    return request({
      url: "http://api.getchute.com/v1/bundles/" + (options.id || options.shortcut),
      method: 'DELETE',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, {});
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  return Bundles;

})();

Assets = (function() {

  function Assets(client) {
    this.client = client;
  }

  Assets.prototype.find = function(options, callback) {
    var _this = this;
    return request({
      url: "http://api.getchute.com/v1/assets/" + (options.id || options.shortcut),
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      }
    }, function(err, res, body) {
      var asset;
      switch (res.statusCode) {
        case 200:
          asset = JSON.parse(body).data;
          if (!options.comments) {
            return callback(false, asset);
          }
          return request({
            url: "http://api.getchute.com/v1/chutes/" + (options.chuteId || options.chute) + "/assets/" + (options.id || options.shortcut) + "/comments",
            method: 'GET',
            headers: {
              'x-client_id': _this.client.options.id,
              'Authorization': "OAuth " + _this.client.options.token
            }
          }, function(err, res, body) {
            switch (res.statusCode) {
              case 200:
                asset.comments = JSON.parse(body).data;
                return callback(false, asset);
              case 401:
                return callback('invalid access token', {});
              default:
                return callback(JSON.parse(body).error, {});
            }
          });
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Assets.prototype.heart = function(options, callback) {
    return request({
      url: "http://api.getchute.com/v1/assets/" + (options.id || options.shortcut) + "/heart",
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false);
        default:
          return callback(true);
      }
    });
  };

  Assets.prototype.unheart = function(options, callback) {
    return request({
      url: "http://api.getchute.com/v1/assets/" + (options.id || options.shortcut) + "/unheart",
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false);
        default:
          return callback(true);
      }
    });
  };

  Assets.prototype.search = function(options, callback) {
    return this.client.search({
      type: 'assets',
      key: options.key
    }, callback);
  };

  Assets.prototype.remove = function(options, callback) {
    var form, method, url;
    if (options.id) {
      url = "http://api.getchute.com/v1/assets/" + (options.id || options.shortcut);
      method = 'DELETE';
      form = {};
    }
    if (options.ids) {
      url = "http://api.getchute.com/v1/assets/remove";
      method = 'POST';
      form = {
        asset_ids: JSON.stringify(options.ids)
      };
    }
    return request({
      url: url,
      method: method,
      form: form,
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  return Assets;

})();

Uploads = (function() {

  function Uploads(client) {
    this.client = client;
  }

  Uploads.prototype.request = function(options, callback) {
    var _this = this;
    return request({
      url: "http://api.getchute.com/v2/uploads",
      method: 'POST',
      body: JSON.stringify({
        files: options.files,
        chutes: options.chutes
      }),
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      }
    }, function(err, res, body) {
      if (res.statusCode !== 200) {
        return callback(err);
      }
      body = JSON.parse(body).data;
      return callback(err, body);
    });
  };

  Uploads.prototype.complete = function(options, callback) {
    var id;
    id = options.id || options;
    return request({
      url: "http://api.getchute.com/v2/uploads/" + id + "/complete",
      method: 'POST',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      }
    }, function(err, res, body) {
      return callback(err);
    });
  };

  Uploads.prototype.upload = function(options, callback) {
    var _this = this;
    return this.request(options, function(err, body) {
      var asset, assetIds, assetShortcuts, _i, _len, _ref;
      assetIds = [];
      assetShortcuts = [];
      _ref = body.existing_assets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        asset = _ref[_i];
        assetIds.push(asset.id);
        assetShortcuts.push(asset.shortcut);
      }
      return async.forEach(body.new_assets, function(asset, nextAsset) {
        assetIds.push(asset.id);
        assetShortcuts.push(asset.shortcut);
        return fs.readFile(asset.upload_info.file_path, function(err, file) {
          return request({
            url: asset.upload_info.upload_url,
            method: 'PUT',
            headers: {
              'Authorization': asset.upload_info.signature,
              'Date': asset.upload_info.date,
              'Content-Type': asset.upload_info.content_type,
              'x-amz-acl': 'public-read'
            },
            body: file
          }, function(err, res, body) {
            return nextAsset();
          });
        });
      }, function() {
        return _this.complete({
          id: body.id
        }, function(err) {
          return callback(err, {
            ids: assetIds,
            shortcuts: assetShortcuts
          });
        });
      });
    });
  };

  return Uploads;

})();

Chutes = (function() {

  function Chutes(client) {
    this.client = client;
  }

  Chutes.prototype.all = function(callback) {
    return request({
      url: "http://api.getchute.com/v1/me/chutes",
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', []);
        default:
          return callback(JSON.parse(body).error, []);
      }
    });
  };

  Chutes.prototype.addAssets = function(options, callback) {
    return request({
      url: "http://api.getchute.com/v1/chutes/" + (options.id || options.shortcut) + "/assets/add",
      method: 'POST',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      },
      form: {
        asset_ids: JSON.stringify(options.ids || options.assets)
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false);
        default:
          return callback(true);
      }
    });
  };

  Chutes.prototype.removeAssets = function(options, callback) {
    return request({
      url: "http://api.getchute.com/v1/chutes/" + (options.id || options.shortcut) + "/assets/remove",
      method: 'POST',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      },
      form: {
        asset_ids: JSON.stringify(options.ids || options.assets)
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false);
        default:
          return callback(true);
      }
    });
  };

  Chutes.prototype.find = function(options, callback) {
    var _this = this;
    return request({
      url: "http://api.getchute.com/v1/chutes/" + (options.id || options.shortcut),
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      }
    }, function(err, res, body) {
      var chute, findContributors, findMembers, findParcels, methods;
      switch (res.statusCode) {
        case 200:
          chute = JSON.parse(body).data;
          if (!(options.contributors || options.members || options.parcels)) {
            return callback(false, chute);
          }
          findContributors = function(done) {
            return request({
              url: "http://api.getchute.com/v1/chutes/" + (options.id || options.shortcut) + "/contributors",
              method: 'GET',
              headers: {
                'x-client_id': _this.client.options.id,
                'Authorization': "OAuth " + _this.client.options.token
              }
            }, function(err, res, body) {
              chute.contributors = (function() {
                switch (res.statusCode) {
                  case 200:
                    return JSON.parse(body).data;
                  default:
                    return [];
                }
              })();
              return done();
            });
          };
          findMembers = function(done) {
            return request({
              url: "http://api.getchute.com/v1/chutes/" + (options.id || options.shortcut) + "/members",
              method: 'GET',
              headers: {
                'x-client_id': _this.client.options.id,
                'Authorization': "OAuth " + _this.client.options.token
              }
            }, function(err, res, body) {
              chute.members = (function() {
                switch (res.statusCode) {
                  case 200:
                    return JSON.parse(body).data;
                  default:
                    return [];
                }
              })();
              return done();
            });
          };
          findParcels = function(done) {
            return request({
              url: "http://api.getchute.com/v1/chutes/" + (options.id || options.shortcut) + "/parcels",
              method: 'GET',
              headers: {
                'x-client_id': _this.client.options.id,
                'Authorization': "OAuth " + _this.client.options.token
              }
            }, function(err, res, body) {
              chute.parcels = (function() {
                switch (res.statusCode) {
                  case 200:
                    return JSON.parse(body).data;
                  default:
                    return [];
                }
              })();
              return done();
            });
          };
          methods = [];
          if (options.contributors) {
            methods.push(findContributors);
          }
          if (options.members) {
            methods.push(findMembers);
          }
          if (options.parcels) {
            methods.push(findParcels);
          }
          return async.parallel(methods, function() {
            return callback(false, chute);
          });
        case 401:
          return callback('invalid access token', []);
        default:
          return callback(JSON.parse(body).error, []);
      }
    });
  };

  Chutes.prototype.create = function(options, callback) {
    var data, key;
    data = {};
    for (key in options) {
      if (options.hasOwnProperty(key)) {
        data["chute[" + key + "]"] = options[key];
      }
    }
    return request({
      url: "http://api.getchute.com/v1/chutes",
      method: 'POST',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      },
      form: data
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 201:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Chutes.prototype.update = function(options, callback) {
    var data, key;
    data = {};
    for (key in options) {
      if (options.hasOwnProperty(key)) {
        data["chute[" + key + "]"] = options[key];
      }
    }
    return request({
      url: "http://api.getchute.com/v1/chutes/" + (options.id || options.shortcut),
      method: 'PUT',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      },
      form: data
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Chutes.prototype.search = function(options, callback) {
    return this.client.search({
      type: 'chutes',
      key: options.key
    }, callback);
  };

  Chutes.prototype.remove = function(options, callback) {
    return request({
      url: "http://api.getchute.com/v1/chutes/" + (options.id || options.shortcut),
      method: 'DELETE',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAuth " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false);
        case 401:
          return callback('invalid access token');
        default:
          return callback(JSON.parse(body).error);
      }
    });
  };

  return Chutes;

})();

module.exports = Chute;
