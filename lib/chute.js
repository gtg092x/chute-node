// Generated by CoffeeScript 1.3.3
var Assets, Bundles, Chute, Chutes, Parcels, Uploads, async, fs, request;

request = require('request');

fs = require('fs');

async = require('async');

String.prototype.width = function(width) {
  return "" + this + "/w/" + width;
};

String.prototype.height = function(height) {
  return "" + this + "/h/" + height;
};

String.prototype.fit = function(width, height) {
  return "" + this + "/fit/" + width + "x" + height;
};

String.prototype.fill = function(width, height) {
  return "" + this + "/" + width + "x" + height;
};

Chute = (function() {

  function Chute(options) {
    if (options == null) {
      options = {};
    }
    this.options = {
      endpoint: 'http://api.getchute.com/v1'
    };
    this.set(options);
  }

  Chute.prototype.set = function(options) {
    var key;
    if (options == null) {
      options = {};
    }
    for (key in options) {
      this.options[key] = options[key];
    }
    return this.initializeResources();
  };

  Chute.prototype.initializeResources = function() {
    this.chutes = new Chutes(this);
    this.parcels = new Parcels(this);
    this.uploads = new Uploads(this);
    this.assets = new Assets(this);
    return this.bundles = new Bundles(this);
  };

  Chute.prototype.search = function(options, callback) {
    if (!options.type) {
      options.type = 'all';
    }
    return request({
      url: "" + this.options.endpoint + "/meta/" + options.type + "/" + options.key,
      method: 'GET',
      headers: {
        'x-client_id': this.options.id,
        'Authorization': "OAUTH " + this.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 201:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  return Chute;

})();

Bundles = (function() {

  function Bundles(client) {
    this.client = client;
  }

  Bundles.prototype.create = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/bundles",
      method: 'POST',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      },
      form: {
        asset_ids: JSON.stringify(options.ids)
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 201:
          return callback(false, JSON.parse(body));
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Bundles.prototype.find = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/bundles/" + (options.id || options.shortcut),
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Bundles.prototype.remove = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/bundles/" + (options.id || options.shortcut),
      method: 'DELETE',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, {});
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  return Bundles;

})();

Assets = (function() {

  function Assets(client) {
    this.client = client;
  }

  Assets.prototype.find = function(options, callback) {
    var _this = this;
    return request({
      url: "" + this.client.options.endpoint + "/assets/" + (options.id || options.shortcut),
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      var asset;
      switch (res.statusCode) {
        case 200:
          asset = JSON.parse(body).data;
          if (!options.comments) {
            return callback(false, asset);
          }
          return request({
            url: "" + _this.client.options.endpoint + "/chutes/" + (options.chuteId || options.chute) + "/assets/" + (options.id || options.shortcut) + "/comments",
            method: 'GET',
            headers: {
              'x-client_id': _this.client.options.id,
              'Authorization': "OAUTH " + _this.client.options.token
            }
          }, function(err, res, body) {
            switch (res.statusCode) {
              case 200:
                asset.comments = JSON.parse(body).data;
                return callback(false, asset);
              case 401:
                return callback('invalid access token', {});
              default:
                return callback(JSON.parse(body).error, {});
            }
          });
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Assets.prototype.heart = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/assets/" + (options.id || options.shortcut) + "/heart",
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false);
        default:
          return callback(true);
      }
    });
  };

  Assets.prototype.unheart = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/assets/" + (options.id || options.shortcut) + "/unheart",
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false);
        default:
          return callback(true);
      }
    });
  };

  Assets.prototype.search = function(options, callback) {
    return this.client.search({
      type: 'assets',
      key: options.key
    }, callback);
  };

  Assets.prototype.remove = function(options, callback) {
    var form, method, url;
    if (options.id) {
      url = "" + this.client.options.endpoint + "/assets/" + (options.id || options.shortcut);
      method = 'DELETE';
      form = {};
    }
    if (options.ids) {
      url = "" + this.client.options.endpoint + "/assets/remove";
      method = 'POST';
      form = {
        asset_ids: JSON.stringify(options.ids)
      };
    }
    return request({
      url: url,
      method: method,
      form: form,
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  return Assets;

})();

Uploads = (function() {

  function Uploads(client) {
    this.client = client;
  }

  Uploads.prototype.generateToken = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/uploads/" + (options.id || options.shortcut) + "/token",
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, JSON.parse(body));
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Uploads.prototype.upload = function(options, callback) {
    var remote, stream;
    remote = request({
      url: options.upload_url,
      method: 'PUT',
      headers: {
        'Authorization': options.signature,
        'Date': options.date,
        'Content-Type': options.content_type,
        'Content-Length': options.md5,
        'x-amz-acl': 'public-read'
      }
    }, function(err, res, body) {
      if (body === '') {
        if (callback) {
          return callback(false);
        }
      } else {
        if (callback) {
          return callback(body);
        }
      }
    });
    stream = fs.createReadStream(options.file_path);
    return stream.pipe(remote);
  };

  Uploads.prototype.complete = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/uploads/" + (options.id || options.asset_id || options.shortcut) + "/complete",
      method: 'POST',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, JSON.parse(body));
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  return Uploads;

})();

Parcels = (function() {

  function Parcels(client) {
    this.client = client;
  }

  Parcels.prototype.find = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/parcels/" + (options.id || options.shortcut),
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, JSON.parse(body));
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Parcels.prototype.create = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/parcels",
      method: 'POST',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      },
      form: {
        files: JSON.stringify(options.files),
        chutes: JSON.stringify(options.chutes)
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 201:
          return callback(false, JSON.parse(body));
        case 401:
          return callback('invalid access token', []);
        default:
          return callback(JSON.parse(body).error, []);
      }
    });
  };

  Parcels.prototype.search = function(options, callback) {
    return this.client.search({
      type: 'parcels',
      key: options.key
    }, callback);
  };

  return Parcels;

})();

Chutes = (function() {

  function Chutes(client) {
    this.client = client;
  }

  Chutes.prototype.all = function(callback) {
    return request({
      url: "" + this.client.options.endpoint + "/me/chutes",
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', []);
        default:
          return callback(JSON.parse(body).error, []);
      }
    });
  };

  Chutes.prototype.addAssets = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/chutes/" + (options.id || options.shortcut) + "/assets/add",
      method: 'POST',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      },
      form: {
        asset_ids: JSON.stringify(options.ids || options.assets)
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false);
        default:
          return callback(true);
      }
    });
  };

  Chutes.prototype.removeAssets = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/chutes/" + (options.id || options.shortcut) + "/assets/remove",
      method: 'POST',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      },
      form: {
        asset_ids: JSON.stringify(options.ids || options.assets)
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false);
        default:
          return callback(true);
      }
    });
  };

  Chutes.prototype.find = function(options, callback) {
    var _this = this;
    return request({
      url: "" + this.client.options.endpoint + "/chutes/" + (options.id || options.shortcut),
      method: 'GET',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      var chute, findContributors, findMembers, findParcels, methods;
      switch (res.statusCode) {
        case 200:
          chute = JSON.parse(body).data;
          if (!(options.contributors || options.members || options.parcels)) {
            return callback(false, chute);
          }
          findContributors = function(done) {
            return request({
              url: "" + _this.client.options.endpoint + "/chutes/" + (options.id || options.shortcut) + "/contributors",
              method: 'GET',
              headers: {
                'x-client_id': _this.client.options.id,
                'Authorization': "OAUTH " + _this.client.options.token
              }
            }, function(err, res, body) {
              chute.contributors = (function() {
                switch (res.statusCode) {
                  case 200:
                    return JSON.parse(body).data;
                  default:
                    return [];
                }
              })();
              return done();
            });
          };
          findMembers = function(done) {
            return request({
              url: "" + _this.client.options.endpoint + "/chutes/" + (options.id || options.shortcut) + "/members",
              method: 'GET',
              headers: {
                'x-client_id': _this.client.options.id,
                'Authorization': "OAUTH " + _this.client.options.token
              }
            }, function(err, res, body) {
              chute.members = (function() {
                switch (res.statusCode) {
                  case 200:
                    return JSON.parse(body).data;
                  default:
                    return [];
                }
              })();
              return done();
            });
          };
          findParcels = function(done) {
            return request({
              url: "" + _this.client.options.endpoint + "/chutes/" + (options.id || options.shortcut) + "/parcels",
              method: 'GET',
              headers: {
                'x-client_id': _this.client.options.id,
                'Authorization': "OAUTH " + _this.client.options.token
              }
            }, function(err, res, body) {
              chute.parcels = (function() {
                switch (res.statusCode) {
                  case 200:
                    return JSON.parse(body).data;
                  default:
                    return [];
                }
              })();
              return done();
            });
          };
          methods = [];
          if (options.contributors) {
            methods.push(findContributors);
          }
          if (options.members) {
            methods.push(findMembers);
          }
          if (options.parcels) {
            methods.push(findParcels);
          }
          return async.parallel(methods, function() {
            return callback(false, chute);
          });
        case 401:
          return callback('invalid access token', []);
        default:
          return callback(JSON.parse(body).error, []);
      }
    });
  };

  Chutes.prototype.create = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/chutes",
      method: 'POST',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      },
      form: {
        'chute[name]': options.name
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 201:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Chutes.prototype.update = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/chutes/" + (options.id || options.shortcut),
      method: 'PUT',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      },
      form: {
        'chute[name]': options.name
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false, JSON.parse(body).data);
        case 401:
          return callback('invalid access token', {});
        default:
          return callback(JSON.parse(body).error, {});
      }
    });
  };

  Chutes.prototype.search = function(options, callback) {
    return this.client.search({
      type: 'chutes',
      key: options.key
    }, callback);
  };

  Chutes.prototype.remove = function(options, callback) {
    return request({
      url: "" + this.client.options.endpoint + "/chutes/" + (options.id || options.shortcut),
      method: 'DELETE',
      headers: {
        'x-client_id': this.client.options.id,
        'Authorization': "OAUTH " + this.client.options.token
      }
    }, function(err, res, body) {
      switch (res.statusCode) {
        case 200:
          return callback(false);
        case 401:
          return callback('invalid access token');
        default:
          return callback(JSON.parse(body).error);
      }
    });
  };

  return Chutes;

})();

module.exports = Chute;
